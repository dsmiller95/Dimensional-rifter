using Assets.Tiling.Tilemapping.RegionConnectivitySystem;
using Assets.WorldObjects.SaveObjects;
using Assets.WorldObjects.SaveObjects.SaveManager;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace Assets.Tiling.Tilemapping
{

    public class CombinationTileMapManager : MonoBehaviour, ISaveable<WorldSaveObject>
    {
        /// <summary>
        /// used when loading tileMaps from save
        /// </summary>
        public TileMapConfigurationData[] tileMapConfig;
        private Dictionary<CoordinateType, TileMapConfigurationData> _configDataDict;
        private Dictionary<CoordinateType, TileMapConfigurationData> ConfigDataDict
        {
            get
            {
                if (_configDataDict == null)
                {
                    _configDataDict = tileMapConfig.ToDictionary(x => x.coordinateType);
                }
                return _configDataDict;
            }
        }

        /// <summary>
        /// the most "On Top" region is at index 0, all regions at a higher index will avoid overlapping with it
        /// </summary>
        [Tooltip("Generated by map gen, loaded from save")]
        public TileMapRegionData[] allRegions;
        private TileMapRegion[] regionBehaviors;

        public ConnectivitySystem connectivitySystem;
        public UniversalCoordinateSystemMembers everyMember;

        public TileMapRegion regionBehaviorPrefab;

        public static CombinationTileMapManager instance;
        private void Awake()
        {
            if (instance != null)
            {
                Debug.LogError("Instance already registered, combination tile map manager is singleton-y");
            }
            instance = this;
            SaveSystemHooks.Instance.PreLoad += ClearInstance;
        }

        private void ClearInstance()
        {
            instance = null;
        }

        private void Start()
        {
            connectivitySystem?.ResetState();
        }

        private void OnRegionPlaneDataChanged()
        {
            SetPlaneIDs();
            if (regionBehaviors != null)
                foreach (var region in regionBehaviors)
                {
                    Destroy(region.gameObject);
                }

            regionBehaviors = allRegions.Select(x =>
            {
                var region = Instantiate(regionBehaviorPrefab, transform);
                var configData = ConfigDataDict[x.baseRange.CoordinateType];
                region.InitializeMeshBuilder(configData, everyMember);

                return region;
            }).ToArray();

            for (short i = 0; i < allRegions.Length; i++)
            {
                var configData = ConfigDataDict[allRegions[i].baseRange.CoordinateType];
                configData.atomataSystem.ExecuteOnRegion(this, i);
            }

            BakeAllTileMapMeshes();
        }

        private void SetPlaneIDs()
        {
            for (short planeID = 0; planeID < allRegions.Length; planeID++)
            {
                allRegions[planeID].planeIDIndex = planeID;
            }
        }

        private void OnDestroy()
        {
            connectivitySystem.StopEverything();
            if (instance == this)
            {
                instance = null;
            }
            SaveSystemHooks.Instance.PreLoad -= ClearInstance;
        }

        private void BakeAllTileMapMeshes(int startFromIndex = 0)
        {
            for (var regionIndex = startFromIndex; regionIndex < allRegions.Length; regionIndex++)
            {
                var regionBehavior = regionBehaviors[regionIndex];
                var regionData = allRegions[regionIndex];

                regionBehavior.BakeTopologyAvoidingOthers(regionData, regionBehaviors.Take(regionIndex));

                regionBehavior.SetupBoundingCollider(regionData);
            }
        }

        //private void UpdateTileMapsBelow(TileMapRegionNoCoordinateType tileMap)
        //{
        //    var index = tileMap.transform.GetSiblingIndex();
        //    var belowTileMaps = transform.GetComponentsInChildren<TileMapRegionNoCoordinateType>().Take(index).ToArray();

        //    var currentTileMapCollider = tileMap.SetupBoundingCollider();
        //    var colliders = new[] { currentTileMapCollider };

        //    foreach (var tileMapToUpdate in belowTileMaps)
        //    {
        //        tileMapToUpdate.UpdateMeshTilesBasedOnColliders(colliders);
        //    }
        //}

        public Vector2 PositionInRealWorld(UniversalCoordinate coordinate)
        {
            var planeData = allRegions[coordinate.CoordinatePlaneID];
            return planeData.coordinateTransform.MultiplyPoint3x4((Vector2)coordinate.ToPositionInPlane());
        }

        public bool ValidCoordinateInOwnPlane(UniversalCoordinate coordinate)
        {
            if (coordinate.CoordinatePlaneID >= allRegions.Length)
            {
                return false;
            }
            var runtimeRegion = regionBehaviors[coordinate.CoordinatePlaneID];
            return runtimeRegion.IsValidInThisPlane(coordinate, allRegions[coordinate.CoordinatePlaneID]);
        }

        public WorldSaveObject GetSaveObject()
        {
            var allRegionSaveData = allRegions.Select((data, planeId) =>
            {
                return new TileRegionSaveObject
                {
                    matrixSerialized = new Scripts.Utilities.SerializableMatrix4x4(data.coordinateTransform),
                    range = data.baseRange
                };
            });

            return new WorldSaveObject
            {
                regions = allRegionSaveData.ToList(),
                members = everyMember.GetSaveObject()
                //regions = allRegions.Select(x => x.GetSaveObject()).ToList()
            };
        }

        public void SetupFromSaveObject(WorldSaveObject save)
        {
            allRegions = save.regions.Select((saved, index) =>
            {
                return new TileMapRegionData
                {
                    coordinateTransform = GetTransformForPlane(saved),
                    planeIDIndex = (short)index,
                    baseRange = saved.range
                };
            }).ToArray();
            everyMember.SetupFromSaveObject(save.members);


            OnRegionPlaneDataChanged();
        }

        private Matrix4x4 GetTransformForPlane(TileRegionSaveObject regionPlane)
        {
            return regionPlane?.matrixSerialized?.GetMatrix() ?? Matrix4x4.identity;
        }

        private void Update()
        {
            //var currentMousePos = MyUtilities.GetMousePos2D();
            //var mouseDelta = currentMousePos - lastMousePos;
            //lastMousePos = currentMousePos;

            //if (Input.GetKeyDown(KeyCode.A) && !isPlacingTileMap)
            //{
            //    var newTileMap = Instantiate(tileMapPrefab, transform).GetComponent<TileMapRegionNoCoordinateType>();
            //    newTileMap.BakeTopologyAvoidingColliders(null);
            //    tileMapToMove = newTileMap;
            //    BeginMovingTileMap(tileMapToMove);
            //}
            //else if (Input.GetMouseButtonDown(0) && isPlacingTileMap)
            //{
            //    FinishMovingTileMap();
            //}

            //if (isPlacingTileMap)
            //{
            //    tileMapToMove.transform.position += (Vector3)(mouseDelta);
            //    UpdateTileMapsBelow(tileMapToMove);
            //}

            connectivitySystem?.TryUpdateConnectivity(BuildConnectionGraph);
        }

        private void BuildConnectionGraph(ConnectivityGraphBuilder builder)
        {
            var totalCoordiantes = allRegions.Select((data, index) => regionBehaviors[index].GreedyCordinateTotalEstimate(data)).Sum();
            builder.InitNodeBuilderArrayWithCapacity(totalCoordiantes);
            builder.ReadFromTileDataIn(everyMember);
            for (var i = 0; i < allRegions.Length; i++)
            {
                regionBehaviors[i].AddConnectivityAndMemberData(allRegions[i], builder);
            }
        }
        public UniversalCoordinate? GetPositionOnActiveTileMapsFromWorldPosition(Vector2 worldPosition)
        {
            for (short planeID = 0; planeID < allRegions.Length; planeID++)
            {
                var planeData = allRegions[planeID];
                var region = regionBehaviors[planeID];
                var coordOpt = region.GetCoordinateFromRealPositionIffValid(worldPosition, planeData);
                if (coordOpt.HasValue)
                {
                    return coordOpt.Value;
                }
            }
            return null;
        }

        public UniversalCoordinate GetCoordinateOnPlaneIDNoValidCheck(Vector2 worldPosition, UniversalCoordinate otherCoordinate)
        {
            var planeID = otherCoordinate.CoordinatePlaneID;
            var planeData = allRegions[planeID];
            var region = regionBehaviors[planeID];
            return region.GetCoordinateFromRealPosition(worldPosition, planeData);
        }

        #region Place-By-Mouse tilemap code
        //private Vector2 lastMousePos;
        //public TileMapRegionNoCoordinateType tileMapToMove;
        //private bool isPlacingTileMap;
        //public TileMapRegionNoCoordinateType tileMapPrefab;


        //public void BeginMovingTileMap(TileMapRegionNoCoordinateType tileMap)
        //{
        //    isPlacingTileMap = true;
        //    BakeAllTileMapMeshes(tileMap);
        //}

        //public void FinishMovingTileMap()
        //{
        //    isPlacingTileMap = false;
        //    BakeAllTileMapMeshes();
        //}
        #endregion

    }
}
